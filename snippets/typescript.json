{
	/*
	// Place your snippets for TypeScript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Print to console": {
		"prefix": "log",
		"body": [
			"console.log('$1');",
			"$2"
		],
		"description": "Log output to console"
	}
*/
	"Ping socket - part 1": {
		"prefix": "gdg_ping_1",
		"body": [
			"let socket = io('http://localhost:3000/');",
			"socket.on('ping', (ping) => {",
			" this.shouldPing = true;",
			" setTimeout(() => this.shouldPing = false, 1000);",
			"});"
		],
		"description": "Ping socket - part 1"
	},
	"Ping socket - subject": {
		"prefix": "gdg_ping_subject",
		"body": [
			"shouldPing = new BehaviorSubject(false);"
		],
		"description": "Ping socket - subject"
	},
	"Ping socket - part 2": {
		"prefix": "gdg_ping_2",
		"body": [
			"socket.on('ping', () => this.shouldPing.next(true));",
			"",
			"this.shouldPing",
			" .debounceTime(1000)",
			" .subscribe(x => this.shouldPing.next(false));"
		],
		"description": "Ping socket - part 2"
	},
	"Ping socket - RxJS imports": {
		"prefix": "gdg_ping_imports",
		"body": [
			"import { BehaviorSubject } from 'rxjs/BehaviorSubject';",
			"import 'rxjs/add/operator/debounceTime';"
		],
		"description": "Ping socket - RxJS imports"
	},
	"Stream service initial": {
		"prefix": "gdg_service_1",
		"body": [
			"import { Injectable, OnInit } from '@angular/core';",
			"import { BehaviorSubject } from 'rxjs/BehaviorSubject';",
			"import 'rxjs/add/operator/debounceTime';",
			"",
			"declare let io: any;",
			"",
			"@Injectable()",
			"export class StreamService {",
			"  ping = new BehaviorSubject<boolean>(false);",
			"",
			"  constructor() {",
			"    let socket = io('http://localhost:3000/');",
			"",
			"    socket.on('ping', () => this.ping.next(true));",
			"",
			"    this.ping",
			"      .debounceTime(1000)",
			"      .subscribe(x => this.ping.next(false));",
			"  }",
			"}"
		],
		"description": "Stream service initial"
	},
	"Full ping component": {
		"prefix": "gdg_ping_3",
		"body": [
			"import { Component, OnInit } from '@angular/core';",
			"import { StreamService } from '../stream.service';",
			"",
			"@Component({",
			"  selector: 'app-ping',",
			"  templateUrl: './ping.component.html',",
			"  styles: []",
			"})",
			"export class PingComponent implements OnInit {",
			"",
			"  constructor(public stream: StreamService) { }",
			"",
			"  ngOnInit() { }",
			"}"
		],
		"description": "Full ping component"
	},
	"Twitter service imports": {
		"prefix": "gdg_service_tweet_import",
		"body": [
			"import { Http } from '@angular/http';",
			"import { Observable } from 'rxjs/Observable';",
			"import 'rxjs/add/operator/mergeMap';"
		],
		"description": "Twitter service imports"
	},
	"Twitter with explicit observable": {
		"prefix": "gdg_service_tweet_1",
		"body": [
			"this.tweets = Observable.create((observer) => {",
			" let tweets = [];",
			" socket.on('tweet', (tweet) => {",
			"   tweets.unshift(tweet);",
			"",
			"   if (tweets.length > 100)",
			"     tweets.splice(100);",
			"",
			"   observer.next(tweets);",
			" });",
			"});"
		],
		"description": "Twitter with explicit observable"
	},
	"Twitter with merge map": {
		"prefix": "gdg_service_tweet_2",
		"body": [
			"this.tweets = http.get('http://localhost:3000/tweets')",
			".mergeMap(response => {",
			" return Observable.create((observer) => {",
			"   let tweets = response.json() || [];",
			"   observer.next(tweets)",
			"   socket.on('tweet', (tweet) => {",
			"     tweets.unshift(tweet);",
			"     if (tweets.length > 100)",
			"       tweets.splice(100);",
			"     observer.next(tweets);",
			"   });",
			" });",
			"});"
		],
		"description": "Twitter with merge map"
	},
	"AppComponent Twitter Stream": {
		"prefix": "gdg_app_1",
		"body": [
			"constructor(public stream: StreamService) { }"
		],
		"description": "Twitter with merge map"
	},
	"AppComponent masonry declaration": {
		"prefix": "gdg_app_declare_masonry",
		"body": [
			"declare let Masonry: any;"
		],
		"description": "Twitter masonry declaration"
	},
	"AppComponent masonry initialise": {
		"prefix": "gdg_app_new_masonry",
		"body": [
			"var masonry = new Masonry('app-root', {",
			" itemSelector: '.EmbeddedTweet'",
			"});"
		],
		"description": "Twitter masonry initialise"
	},
	"AppComponent masonry subscribe": {
		"prefix": "gdg_app_masonry_subscribe",
		"body": [
			"this.stream.tweets.debounceTime(1).subscribe(x => {",
			" masonry.reloadItems();",
			" masonry.layout();",
			"});"
		],
		"description": "Twitter masonry subscribe"
	}
}